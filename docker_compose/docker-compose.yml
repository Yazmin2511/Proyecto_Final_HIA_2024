services:

#
# BASE DE DATOS
#
  database:
    restart: unless-stopped
    networks:
      my_network:
        ipv4_address: 172.20.0.2
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: secret
      MONGO_INITDB_DATABASE: mydatabase
      MONGO_INITDB_REPLICA_SET_NAME: "rs0"
      MONGO_INITDB_JS_FILE: /docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./keyfile:/data/keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    command: >
      bash -c "chmod 600 /data/keyfile && 
      chown 999:999 /data/keyfile && 
      mongod --replSet rs0 --bind_ip_all --keyFile /data/keyfile"

# 
# MONGO SECONDARY 1 
#
  mongo-secondary1: 
    image: mongo:7 
    container_name: mongo-secondary1 
    restart: unless-stopped 
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root 
      MONGO_INITDB_ROOT_PASSWORD: secret 
      MONGO_INITDB_REPLICA_SET_NAME: "rs0"
      MONGO_INITDB_JS_FILE: /docker-entrypoint-initdb.d/init-mongo.js
    networks: 
      my_network: 
        ipv4_address: 172.20.0.3 
    volumes: 
      - mongo-secondary1-data:/data/db
      - ./keyfile:/data/keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    command: >
      bash -c "chmod 600 /data/keyfile && 
      chown 999:999 /data/keyfile && 
      mongod --replSet rs0 --bind_ip_all --keyFile /data/keyfile"
# 
# MONGO SECONDARY 2 
# 
  mongo-secondary2: 
    image: mongo:7 
    container_name: mongo-secondary2 
    restart: unless-stopped 
    environment: 
      MONGO_INITDB_ROOT_USERNAME: root 
      MONGO_INITDB_ROOT_PASSWORD: secret 
      MONGO_INITDB_REPLICA_SET_NAME: "rs0"
      MONGO_INITDB_JS_FILE: /docker-entrypoint-initdb.d/init-mongo.js
    networks: 
      my_network: 
        ipv4_address: 172.20.0.4 
    volumes: 
      - mongo-secondary2-data:/data/db
      - ./keyfile:/data/keyfile
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    command: >
        bash -c "chmod 600 /data/keyfile && 
        chown 999:999 /data/keyfile && 
        mongod --replSet rs0 --bind_ip_all --keyFile /data/keyfile"
      
# MONGO EXPRESS
# Default user:password ==> admin:pass

  database_client:
    restart: unless-stopped
    networks:
      my_network:
        ipv4_address: 172.20.0.5
    image: mongo-express:latest
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://newAdmin:newPassword@database:27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: newAdmin
      ME_CONFIG_MONGODB_ADMINPASSWORD: newPassword
    depends_on:
      - database

#
# BACKEND
#
  backend:
    image: primm/backend:latest
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    networks:
      my_network:
        ipv4_address: 172.20.0.6
    environment:
      PORT: 3000
      MONGO_URI: mongodb://newAdmin:newPassword@database:27017
      SECRET_JWT_SEED: secret
    ports:
      - "8000:3000"
    depends_on:
      - database
#
# frontend
#
  frontend:
    image: primm/frontend:latest
    restart: unless-stopped
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    networks:
      my_network:
        ipv4_address: 172.20.0.7
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - backend

#
# data_restorer
#
  data_restorer: 
    image: mongo:7  
    networks: 
      my_network: 
        ipv4_address: 172.20.0.8
    volumes: 
      - ./dump:/dump 
    depends_on: 
      - database 
    entrypoint: ["/bin/sh", "-c", "mongorestore --uri mongodb://newAdmin:newPassword@database:27017 --dir /dump"]
#
# MONGODB_EXPORTER
#
  mongodb_exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb_exporter
    networks:
      my_network:
        ipv4_address: 172.20.0.9
    ports:
      - "9216:9216"
    environment:
      - MONGODB_URI=mongodb://root:secret@database:27017
    command: ["--collect-all"]
    depends_on:
      - database

#
# PROMETHEUS
#
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      my_network:
        ipv4_address: 172.20.0.10
    ports:
      - "9090:9090"
    volumes: 
      - ./prometheus.yml:/etc/prometheus/prometheus.yml 
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml' 
    depends_on:
      - mongodb_exporter

#
# GRAFANA
#
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      my_network:
        ipv4_address: 172.20.0.11
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus


networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo-data:
    driver: local
  mongo-secondary1-data: 
    driver: local 
  mongo-secondary2-data:
    driver: local
  grafana-data:
    driver: local
